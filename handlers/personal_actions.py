from aiogram import types
from dispatcher import dp, bot, db
import asyncpg
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from kayboard.menu import user_menu, admin_menu, settings_users_admin, settings_buttons
from kayboard.inlyne_menu import del_btn_user_menu, cansel_menu, add_staff_inlyne
from .state import add_state
from aiogram.dispatcher.storage import FSMContext
import sqlite3
import os
import datetime

today = datetime.date.today()

@dp.message_handler(commands ="start")
async def start(message: types.Message):
   # await db.drop_users()
    user_id = message.from_user.id
    if user_id == 417416236:
        status = "Admin"
        await db.add_status_for_user(user_id=user_id, status=status)
        await message.answer(text='–ê–ª–µ–∫—Å–∞–Ω–¥—Ä, –≤—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –ê–¥–º–∏–Ω–æ–º')
    chek_admin_status = await db.get_status_user(user_id=user_id)
    if chek_admin_status is not None:
        chek_admin_status = chek_admin_status.get("status")
    else:
        print(chek_admin_status)
    try:
        await db.add_user(user_id=message.from_user.id, user_name=message.from_user.first_name,
                        full_name=message.from_user.username)
    except asyncpg.exceptions.UniqueViolationError as Err:
        print(Err)
    if chek_admin_status == "Admin" or chek_admin_status == "User":
        await message.answer(text='Hey broüñê', reply_markup=user_menu)
    else:
        await message.answer(text='Hey broüñê')


@dp.message_handler(text =["‚òëÔ∏è –ö—ñ–Ω–≥+–∞–≤—Ç–æ—Ä–µ–≥–∏ OCTO", "‚úÖ –§–∞—Ä–º –∞–∫–∫ Facebook OCTO", "–ö—ñ–Ω–≥+–∞–≤—Ç–æ—Ä–µ–≥–∏  ADS", "–§–∞—Ä–º –∞–∫–∫ Facebook ADS"])
async def get_staff(message: types.Message):
    user_id = message.from_user.id
    chek_admin_status = await db.get_status_user(user_id=user_id)
    chek_admin_status = chek_admin_status.get("status")
    if chek_admin_status == "Admin" or chek_admin_status == "User":
        type_item = message.text
        category = ""
        buttons = []

        if type_item == "‚òëÔ∏è –ö—ñ–Ω–≥+–∞–≤—Ç–æ—Ä–µ–≥–∏ OCTO":
            category = "acc_fb_one"
        elif type_item == "‚úÖ –§–∞—Ä–º –∞–∫–∫ Facebook OCTO":
            category = "acc_fb_two"
        elif type_item == "–ö—ñ–Ω–≥+–∞–≤—Ç–æ—Ä–µ–≥–∏  ADS":
            category = "acc_fb_three"
        elif type_item == "–§–∞—Ä–º –∞–∫–∫ Facebook ADS":
            category = "acc_fb_four"

        rows = await db.select_buttons(category)
        for row in rows:
            txt = (''.join(str(item) for item in row))
            buttons.append(InlineKeyboardButton(f"{txt}", callback_data=f"get_staff{row[0]}"))
        keyboard = InlineKeyboardMarkup().add(*buttons)
        await message.answer(text=f"–í—ã–±–µ—Ä–µ—Ç–µ —Ç–∏–ø –∞–∫–∫–æ–≤ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"{type_item}\"", reply_markup=keyboard)



#–ù—É–∂–Ω–æ –¥–æ–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å callback_data=f"del_for_basket{row[0]}")


# Admin menu
# Admin menu
# Admin menu
# Admin menu


@dp.message_handler(text="/admin_panel")
async def admin_start(message: types.Message):
    user_id = message.from_user.id
    chek_admin_status = await db.get_status_user(user_id=user_id)
    chek_admin_status = chek_admin_status.get("status")
    if chek_admin_status == "Admin":
        text1 = "–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –≤–∫–ª—é—á–µ–Ω–∞"
        await message.answer(text=text1, reply_markup=admin_menu)



@dp.message_handler(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def edit_users(message: types.Message):
    user_id = message.from_user.id
    chek_admin_status = await db.get_status_user(user_id=user_id)
    chek_admin_status = chek_admin_status.get("status")
    if chek_admin_status == "Admin":
        text1 = "–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–∫–ª—é—á–µ–Ω–æ"
        await message.answer(text=text1, reply_markup=settings_users_admin)


@dp.message_handler(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏")
async def edit_buttons(message: types.Message):
    user_id = message.from_user.id
    chek_admin_status = await db.get_status_user(user_id=user_id)
    chek_admin_status = chek_admin_status.get("status")
    if chek_admin_status == "Admin":
        text1 = "–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –≤–∫–ª—é—á–µ–Ω–æ"
        await message.answer(text=text1, reply_markup=settings_buttons)


@dp.message_handler(text=["–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –≤ ‚òëÔ∏è –ö—ñ–Ω–≥+–∞–≤—Ç–æ—Ä–µ–≥–∏ OCTO", "–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –≤ ‚úÖ–§–∞—Ä–º –∞–∫–∫ Facebook OCTO", "–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –≤ –ö—ñ–Ω–≥+–∞–≤—Ç–æ—Ä–µ–≥–∏  ADS", "–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –≤ –§–∞—Ä–º –∞–∫–∫ Facebook ADS"])
async def add_batons(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    chek_admin_status = await db.get_status_user(user_id=user_id)
    chek_admin_status = chek_admin_status.get("status")
    if chek_admin_status == "Admin":
        types_item_text = message.text
        await state.update_data(types_item_text=types_item_text)
        text = "–ù–∞–ø–∏—à–∏—Ç–µ –∫–∞–∫ –±—É–¥–µ—Ç –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–∞"
        await add_state.button_name_state.set()
        await message.answer(text=text, reply_markup=cansel_menu)



@dp.message_handler(text="–£–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É")
async def show_edit_buttons(message: types.Message):
    user_id = message.from_user.id
    chek_admin_status = await db.get_status_user(user_id=user_id)
    chek_admin_status = chek_admin_status.get("status")
    if chek_admin_status == "Admin":
        text = "–í—ã–±–µ—Ä–µ—Ç–µ –ø—É–Ω–∫—Ç "
        await message.answer(text=text, reply_markup=del_btn_user_menu)



@dp.message_handler(text="–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def show_edit_buttons(message: types.Message):
    user_id = message.from_user.id
    chek_admin_status = await db.get_status_user(user_id=user_id)
    chek_admin_status = chek_admin_status.get("status")
    if chek_admin_status == "Admin":
        rows = await db.select_all_users()
        data_user = ["User_id: ", "–ù–∏–∫: ", "–Æ–∑–µ—Ä–Ω–µ–π–º: @", "–°—Ç–∞—Ç—É—Å: "]
        for row in rows:
            buttons = []
            txt = '\n'.join([f"{data_user[i]}{row[i]}" for i in range(len(row))])
            #txt = ('\n'.join(str(item) for item in row))
            buttons.append(InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å", callback_data=f"del_users{row[0]}"))
            buttons.append(InlineKeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"register_user{row[0]}"))
            buttons.append(InlineKeyboardButton("–°–¥–µ–ª–∞—Ç—å –ê–¥–º–∏–Ω–æ–º", callback_data=f"register_admin{row[0]}"))
            keyboard = InlineKeyboardMarkup().add(*buttons)
            await message.answer(txt, reply_markup=keyboard)


@dp.message_handler(text=["–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö", "–ü–æ–∫–∞–∑–∞—Ç—å –ê–¥–º–∏–Ω–æ–≤"])
async def show_edit_buttons(message: types.Message):
    user_id = message.from_user.id
    chek_admin_status = await db.get_status_user(user_id=user_id)
    chek_admin_status = chek_admin_status.get("status")
    if chek_admin_status == "Admin":
        status = ""
        if message.text == "–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö":
            status = "User"
        elif message.text == "–ü–æ–∫–∞–∑–∞—Ç—å –ê–¥–º–∏–Ω–æ–≤":
            status= "Admin"
        rows = await db.select_user_for_status(status)
        data_user = ["User_id: ", "–ù–∏–∫: ", "–Æ–∑–µ—Ä–Ω–µ–π–º: @", "–°—Ç–∞—Ç—É—Å: "]
        for row in rows:
            buttons = []
            txt = '\n'.join([f"{data_user[i]}{row[i]}" for i in range(len(row))])
            #txt = ('\n'.join(str(item) for item in row))
            buttons.append(InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å", callback_data=f"del_users{row[0]}"))
            buttons.append(InlineKeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"register_user{row[0]}"))
            buttons.append(InlineKeyboardButton("–°–¥–µ–ª–∞—Ç—å –ê–¥–º–∏–Ω–æ–º", callback_data=f"register_admin{row[0]}"))
            keyboard = InlineKeyboardMarkup().add(*buttons)
            await message.answer(txt, reply_markup=keyboard)



@dp.message_handler(text="–î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ñ")
async def show_edit_buttons(message: types.Message):
    user_id = message.from_user.id
    chek_admin_status = await db.get_status_user(user_id=user_id)
    chek_admin_status = chek_admin_status.get("status")
    if chek_admin_status == "Admin":
        text = "–í—ã–±–µ—Ä–µ—Ç–µ –ø—É–Ω–∫—Ç –≤ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏ "
        await message.answer(text=text, reply_markup=add_staff_inlyne)


@dp.message_handler(text="–ò—Å—Ç–æ—Ä–∏—è")
async def show_edit_buttons(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    chek_admin_status = await db.get_status_user(user_id=user_id)
    chek_admin_status = chek_admin_status.get("status")
    if chek_admin_status == "Admin":
        rows = await db.select_all_history()
        data_user = ["User_id: ", "–Æ–∑–µ—Ä–Ω–µ–π–º: @", "–ù–∏–∫: ", "–°—Ç–∞—Ç—É—Å: ", "–ê–∫–∫: ", "–ö–Ω–æ–ø–∫–∞: "]
        for row in rows:
            txt = '\n'.join([f"{data_user[i]}{row[i]}" for i in range(len(data_user))])
            await message.answer(txt)




@dp.message_handler(text="–£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")
async def show_edit_buttons(message: types.Message):
    user_id = message.from_user.id
    if user_id == 417416236:
        await db.delete_all_history()
        await message.answer("–ò—Å—Ç–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞")
    else:
        await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å –∏—Å—Ç–æ—Ä–∏—é")



@dp.message_handler(text="–¢–æ–≤–∞—Ä –≤–∑—è—Ç—ã–π —Ä–∞–Ω–µ–µ")
async def show_edit_buttons(message: types.Message):
    user_id = message.from_user.id
    chek_admin_status = await db.get_status_user(user_id=user_id)
    chek_admin_status = chek_admin_status.get("status")
    chat_id = message.chat.id
    if chek_admin_status == "Admin" or chek_admin_status == "User":
        rows = await db.show_history_user(user_id)
        data_user = ["User_id: ", "–Æ–∑–µ—Ä–Ω–µ–π–º: @", "–ù–∏–∫: ", "–°—Ç–∞—Ç—É—Å: ", "–ê–∫–∫: ", "–ö–Ω–æ–ø–∫–∞: "]
        for row in rows:
            txt = '\n'.join([f"{data_user[i]}{row[i]}" for i in range(len(data_user))])
            await message.answer(txt)



